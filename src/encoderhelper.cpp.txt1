/////////////////////////////////////////////////////////////////

#include "encoderhelper.h"
#include "pinouthelper.h"

#define ROTARY_PIN1 ENC_CLK
#define ROTARY_PIN2 ENC_DT
#define BUTTON_PIN ENC_SW
#define MOVES_PER_CLICK 4

/////////////////////////////////////////////////////////////////

ESPRotary r = ESPRotary(ROTARY_PIN1, ROTARY_PIN2, MOVES_PER_CLICK);
Button2 b = Button2(BUTTON_PIN);

bool leftPinFlag;
bool rightPinFlag;
bool switchPinToggled;

/////////////////////////////////////////////////////////////////

void ENCODERsetup()
{
    //   Serial.begin(9600);
    //   delay(50);
    Serial.println("\n\nSimple Counter");

    r.setChangedHandler(rotate);
    r.setLeftRotationHandler(showDirection);
    r.setRightRotationHandler(showDirection);

    b.setClickHandler(showPosition);
    b.setLongClickHandler(resetPosition);
}

void ENCODERloop()
{
    r.loop();
    b.loop();
}

/////////////////////////////////////////////////////////////////

void rotate(ESPRotary &r)
{
    //    Serial.println(r.getPosition());
    r.getPosition();
}

void showDirection(ESPRotary &r)
{
    //   Serial.println(r.directionToString(r.getDirection()));
    // Serial.println(r.getDirection());
    if (r.getDirection() == RE_RIGHT)
        rightPinFlag = true;
    else
        leftPinFlag = true;
}

void showPosition(Button2 &btn)
{
    //   Serial.println(r.getPosition());
    switchPinToggled = true;
}

void resetPosition(Button2 &btn)
{
    //   r.resetPosition();
    //   Serial.println("Reset!");
    //   Serial.println(r.getPosition());
}

/////////////////////////////////////////////////////////////////